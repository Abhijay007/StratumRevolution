[
  {
    "slug": "sri-roadmap-2025",
    "title": "SRI Roadmap: Q4 2024 - 2025",
    "description": "Today, we’re sharing the  (Stratum Reference Implementation) roadmap providing insights into our ongoing work and the project's direction. Additionally, we are publishing the latest progress on Stratum V2 protocol specifications, further emphasizing our commitment to openness and building in public.",
    "date": "2024-11-07",
    "formattedDate": "Nov 7, 2024",
    "authors": ["Pavlenex"],
    "tags": ["StratumV2", "Sri", "Roadmap"],
    "content": "\nAs we enter Q4 2024, the Stratum V2 Reference Implementation (SRI) project is focused on achieving key objectives that will pave the way for broader adoption in 2025.\n\nWith a skilled and focused team of core contributors, our main goal is to **secure SRI adoption** in 2025 by supporting one or more early adopters (in addition to [Demand](https://www.dmnd.work)) in launching an SV2 Pool.\n\nWe plan to achieve this through:\n\n- **Refining low-level APIs**: Ensuring the protocol crates are thoroughly documented and production-ready. (currently in beta)\n- **Close collaboration with early adopters**: Actively working with early adopters to support their SV2 journey and ensure the project aligns with actual market needs\n- **Refactoring high-level (application) roles**: Initiating refactoring efforts with the guidance and feedback of early adopters and getting roles into beta and eventually production-ready state (currently in alpha)\n\nOur primary development objective is to **refine our APIs** through comprehensive documentation and refactoring. This is complemented by the implementation of a **new integration test framework** to ensure codebase stability and predictable component interactions.\n\nOur secondary development goal centers around **close collaboration with early adopters**. This interaction helps us achieve two things: a better understanding of market requirements and valuable contributions from early adopters, which will accelerate the **refactoring** and **production-readiness** of the most used **roles** (applications).\n\nCurrently, a few early adopters, despite being aware of the alpha state of the application-level roles, have begun building on these roles. Several adopters are using them with the goal of launching a beta or **production-ready SV2 Pool** in 2025. For this reason, we’re proposing to shift from our original plan to focus solely on low-level APIs.\n\n![Roadmap Meme](/assets/sri-roadmap-meme.jpg)\n\nGetting real user feedback during development is something we’ve been waiting for a long time, and now that early adopters are engaging with SRI, it’s crucial to adapt to this reality. If we remain solely focused on refining low-level protocols while early adopters are actively building on the high-level roles, we risk creating a bottleneck that could leave early adopters waiting for months while we finalize the necessary refactoring.\n\nTo address this, the roadmap suggests a **balanced approach**. Part of the core team will continue to prioritize low-level protocol work, but another part should actively engage with early adopters to understand their specific needs at the application level, documenting those needs and ensure the most requested features are in place. We should ideally aim to motivate early adopters to help us through direct or indirect contributions to our codebase.\n\nThis means our team needs to be in sync, adapting to this new situation and plan out how to tackle these efforts nearly in parallel. It’s suggested that we don’t start working on roles until a new testing suite is in place. Once that is done, we should work with early adopters, getting as much feedback as we can on roles, encouraging them to contribute back to our codebase, as we work on protocols.\n\nBelow, is a high-level look at our roadmap for the next few months. This plan focuses on improving the maturity of our codebase through protocol refactoring, specification stabilization, and removing technical debt, all while keeping early adopters engaged and supported throughout the process, aiming to initiate work on roles, always having the same mission: SRI adoption. It it's a dynamic plan, subject to change depending on early adopter interactions.\n\nHigher-resolution image available [here](https://drive.google.com/file/d/1CWFt9o7NOFYfdJrgashLlsAagz7PBZxO/view?usp=sharing) | [Figma File](https://www.figma.com/design/JOgHHrAeRYLHjn6Hc2Hfle/SRI-Roadmap-2024%2F25?node-id=0-1&t=woeUq9LRsGTiT3Ly-1)\n\n![Roadmap ](/assets//SRI-Roadmap-2024.png)\n\n## October\n\n- SRI **1.1.0 launch.** This release includes the base for comprehensive protocol documentation, and addition of the integration tests framework.\n- We are establishing regular **communication channels and dedicated support** for all potential adopters and the core team. This involves organizing calls and support channels to ensure a smooth adoption process.\n- A dedicated [auditor role](https://github.com/stratum-mining/stratum/discussions/1052) working group is being established to explore the specifics of the auditor role. This role will focus on transparency and accountability of shares, addressing the need for better auditing processes in mining operations.\n- Cleaning up the **Mining Protocol Specs** [#98](https://github.com/stratum-mining/sv2-spec/pull/98)\n\n## December\n\n- Add variable difficulty feature to the pool\n- Launch SRI 1.2.0 - ensures protocol crates are all well documented and finalized and integration tests framework together with tests is in place, basically unifying the efforts that started in the past 2-3 months.\n- Begin estimation on refactoring and improvements for protocols\n- Continue our Auditor Role research alongside the development efforts.\n- Benchmarking Case Study launched by an adopter, showcasing the advantages of SV2 in a real-world scenario. This case study will serve as a proof point to illustrate SV2’s benefits to other potential adopters.\n- Encouraging early adopters to contribute back to SRI to avoid code fragmentation and ensure easier maintenance long-term (these contributions will most likely be in roles)\n\n## January\n\n- During this period, we are also focusing on **migrating the Message Generator** (MG) to a separate repository to better modularize the codebase.\n- Continue our **Auditor Role research** alongside the development efforts.\n  Simultaneously, we should kick off early firmware research inspired by [this doc](https://docs.google.com/document/u/1/d/1iW48-Y4Xvr2IN7PU_9xYw-i5wReCQ98SyliI55_LSos/edit).\n\n## February-March\n\n- One of our key objectives is to see an **early adopter deploy SV2** in their production environment.\n- **Auditor Role Specification proposal** based on the research conducted in Q4 2024.\n- **1.3.0 Launch** is scheduled for March, which should also finalize our protocol level refactorings.\n- Migrating Message generator out of the main repository.\n\n## Future\n\nMoving forward, our goal is to work towards beta and eventually **production-ready applications** by refining and solidifying all critical components, ensuring the protocol is battle tested for widespread adoption.\n",
    "html": "<p>As we enter Q4 2024, the Stratum V2 Reference Implementation (SRI) project is focused on achieving key objectives that will pave the way for broader adoption in 2025.</p>\n<p>With a skilled and focused team of core contributors, our main goal is to <strong>secure SRI adoption</strong> in 2025 by supporting one or more early adopters (in addition to <a href=\"https://www.dmnd.work\">Demand</a>) in launching an SV2 Pool.</p>\n<p>We plan to achieve this through:</p>\n<ul>\n<li><strong>Refining low-level APIs</strong>: Ensuring the protocol crates are thoroughly documented and production-ready. (currently in beta)</li>\n<li><strong>Close collaboration with early adopters</strong>: Actively working with early adopters to support their SV2 journey and ensure the project aligns with actual market needs</li>\n<li><strong>Refactoring high-level (application) roles</strong>: Initiating refactoring efforts with the guidance and feedback of early adopters and getting roles into beta and eventually production-ready state (currently in alpha)</li>\n</ul>\n<p>Our primary development objective is to <strong>refine our APIs</strong> through comprehensive documentation and refactoring. This is complemented by the implementation of a <strong>new integration test framework</strong> to ensure codebase stability and predictable component interactions.</p>\n<p>Our secondary development goal centers around <strong>close collaboration with early adopters</strong>. This interaction helps us achieve two things: a better understanding of market requirements and valuable contributions from early adopters, which will accelerate the <strong>refactoring</strong> and <strong>production-readiness</strong> of the most used <strong>roles</strong> (applications).</p>\n<p>Currently, a few early adopters, despite being aware of the alpha state of the application-level roles, have begun building on these roles. Several adopters are using them with the goal of launching a beta or <strong>production-ready SV2 Pool</strong> in 2025. For this reason, we’re proposing to shift from our original plan to focus solely on low-level APIs.</p>\n<p><img src=\"/assets/sri-roadmap-meme.jpg\" alt=\"Roadmap Meme\"></p>\n<p>Getting real user feedback during development is something we’ve been waiting for a long time, and now that early adopters are engaging with SRI, it’s crucial to adapt to this reality. If we remain solely focused on refining low-level protocols while early adopters are actively building on the high-level roles, we risk creating a bottleneck that could leave early adopters waiting for months while we finalize the necessary refactoring.</p>\n<p>To address this, the roadmap suggests a <strong>balanced approach</strong>. Part of the core team will continue to prioritize low-level protocol work, but another part should actively engage with early adopters to understand their specific needs at the application level, documenting those needs and ensure the most requested features are in place. We should ideally aim to motivate early adopters to help us through direct or indirect contributions to our codebase.</p>\n<p>This means our team needs to be in sync, adapting to this new situation and plan out how to tackle these efforts nearly in parallel. It’s suggested that we don’t start working on roles until a new testing suite is in place. Once that is done, we should work with early adopters, getting as much feedback as we can on roles, encouraging them to contribute back to our codebase, as we work on protocols.</p>\n<p>Below, is a high-level look at our roadmap for the next few months. This plan focuses on improving the maturity of our codebase through protocol refactoring, specification stabilization, and removing technical debt, all while keeping early adopters engaged and supported throughout the process, aiming to initiate work on roles, always having the same mission: SRI adoption. It it’s a dynamic plan, subject to change depending on early adopter interactions.</p>\n<p>Higher-resolution image available <a href=\"https://drive.google.com/file/d/1CWFt9o7NOFYfdJrgashLlsAagz7PBZxO/view?usp=sharing\">here</a> | <a href=\"https://www.figma.com/design/JOgHHrAeRYLHjn6Hc2Hfle/SRI-Roadmap-2024%2F25?node-id=0-1&amp;t=woeUq9LRsGTiT3Ly-1\">Figma File</a></p>\n<p><img src=\"/assets//SRI-Roadmap-2024.png\" alt=\"Roadmap \"></p>\n<h2>October</h2>\n<ul>\n<li>SRI <strong>1.1.0 launch.</strong> This release includes the base for comprehensive protocol documentation, and addition of the integration tests framework.</li>\n<li>We are establishing regular <strong>communication channels and dedicated support</strong> for all potential adopters and the core team. This involves organizing calls and support channels to ensure a smooth adoption process.</li>\n<li>A dedicated <a href=\"https://github.com/stratum-mining/stratum/discussions/1052\">auditor role</a> working group is being established to explore the specifics of the auditor role. This role will focus on transparency and accountability of shares, addressing the need for better auditing processes in mining operations.</li>\n<li>Cleaning up the <strong>Mining Protocol Specs</strong> <a href=\"https://github.com/stratum-mining/sv2-spec/pull/98\">#98</a></li>\n</ul>\n<h2>December</h2>\n<ul>\n<li>Add variable difficulty feature to the pool</li>\n<li>Launch SRI 1.2.0 - ensures protocol crates are all well documented and finalized and integration tests framework together with tests is in place, basically unifying the efforts that started in the past 2-3 months.</li>\n<li>Begin estimation on refactoring and improvements for protocols</li>\n<li>Continue our Auditor Role research alongside the development efforts.</li>\n<li>Benchmarking Case Study launched by an adopter, showcasing the advantages of SV2 in a real-world scenario. This case study will serve as a proof point to illustrate SV2’s benefits to other potential adopters.</li>\n<li>Encouraging early adopters to contribute back to SRI to avoid code fragmentation and ensure easier maintenance long-term (these contributions will most likely be in roles)</li>\n</ul>\n<h2>January</h2>\n<ul>\n<li>During this period, we are also focusing on <strong>migrating the Message Generator</strong> (MG) to a separate repository to better modularize the codebase.</li>\n<li>Continue our <strong>Auditor Role research</strong> alongside the development efforts.\nSimultaneously, we should kick off early firmware research inspired by <a href=\"https://docs.google.com/document/u/1/d/1iW48-Y4Xvr2IN7PU_9xYw-i5wReCQ98SyliI55_LSos/edit\">this doc</a>.</li>\n</ul>\n<h2>February-March</h2>\n<ul>\n<li>One of our key objectives is to see an <strong>early adopter deploy SV2</strong> in their production environment.</li>\n<li><strong>Auditor Role Specification proposal</strong> based on the research conducted in Q4 2024.</li>\n<li><strong>1.3.0 Launch</strong> is scheduled for March, which should also finalize our protocol level refactorings.</li>\n<li>Migrating Message generator out of the main repository.</li>\n</ul>\n<h2>Future</h2>\n<p>Moving forward, our goal is to work towards beta and eventually <strong>production-ready applications</strong> by refining and solidifying all critical components, ensuring the protocol is battle tested for widespread adoption.</p>\n"
  },
  {
    "slug": "sri-1.0.0",
    "title": "Introducing SRI 1.0.0 - the most important milestone in our Stratum V2 journey!",
    "description": "We are thrilled to announce the launch of SRI 1.0.0! This marks an important milestone in our mission to decentralize and enhance bitcoin mining and stands ready for immediate testing and integration.",
    "date": "2024-03-21",
    "formattedDate": "Mar 21, 2024",
    "authors": ["Pavlenex"],
    "tags": ["StratumV2", "SRI", "Release"],
    "content": "\nWe are thrilled to announce the launch of SRI [1.0.0](https://github.com/stratum-mining/stratum/releases)! This marks an important milestone in our mission to decentralize and enhance bitcoin mining and stands ready for immediate testing and integration.\n\nStart your SV2 journey with our [getting started guide](https://stratumprotocol.org/getting-started/).\n\n## 🛎️ Key highlights\n\n[![SRI 1.0.0 Announcement](https://img.youtube.com/vi/cyduxNB5R7E/mqdefault.jpg)](https://www.youtube.com/watch?v=cyduxNB5R7E)\n\n### 👷 Miners\n\n- Connect to a SV2 pool without upgrading existing SV1 firmware through Translation Proxy or\n- Connect to an SV2 pool directly with an SV2 firmware device (BraiinsOS)\n- Run you own bitcoin node, construct templates, and declare them to the SV2 Pool\n- Utilize pool fallback functionality in case the pool decides to censor\n\n### 🛠️ Pools\n\n- Deploy and operate a very simple SV2 Pool\n- Integrate SV2 into an existing pool through our libraries\n\nThe new version is a result of improvements in the Stratum V2 [specification](https://github.com/stratum-mining/sv2-spec) through the working [group](https://www.cnbc.com/2022/10/11/bitcoin-mining-software-overhaul-stratum-v2-promoted-by-block-braiins.html) collaboration and rigorous testing with our interoperability suite to ensure compatibility between the two implementations of the Stratum V2 protocol.\n\nAs we planned [eight months ago](https://stratumprotocol.org/blog/sri-roadmap-2023/), the release allows miners running SV1 or SV2 firmware to connect to an SV2 Pool (directly or through a translation proxy), optionally using a locally hosted Job Declaration Client and a patched version of a Bitcoin Core Node to **construct their own block templates** which are then sent to the Job Declarator Server run by the SV2 Pool. It’s important to mention that our code refactoring introduced the ability for the node and JDC to be run by an independent third-party, not just the miners.\n\n![Config A](/assets/config-a.svg)\n\nThe newly implemented **pool fallback functionality** ensures that if a pool rejects a miner's template, the miner's Job Declarator Client automatically switches to an alternative pool. Miners can configure several fallback options and if all listed pools decide to censor, miners will end up solo mining. This serves as a powerful incentive for pools to act in the best interest of miners, as rejecting templates without a valid reason could lead to a significant loss of hash power to competitors. If all miners run standardized software, the entire hash rate of the pool could end up with a competing pool.\n\nAside from pools rejecting templates with transactions they wish to censor, there are several other scenarios where template rejection could trigger the pool fallback feature:\n\n- A bug in the pool or downstream\n- A connection interruption between the pool and downstream\n- Downstream creates custom templates below the acceptable fee policy defined by the pool\n\n**SRI’s pool** is simple and opinionated and currently can receive a template from the Template Provider, and create jobs for the downstream with the adequate difficulty. Anyone can easily deploy this simple pool today or use our libraries to integrate into their existing operations. Going forward, we plan to continue refactoring our code to allow for more diverse use-cases. Anyone interested in integrating SV2 into an existing pool, or starting a brand-new pool, [let us know](https://discord.gg/stEjAZ2y8r), we’d love to collaborate more closely. One example of a pool using SRI in production is [DMND](https://www.dmnd.work/).\n\n**Template Provider** enables the selection of transactions from the locally-run bitcoin node. Miners (soon, also independent third parties) can create custom block templates and declare custom mining jobs to the pool. Currently, to use the Template Provider you need to use our patched version of Bitcoin Core. Sjors Provoost opened a pull request in the Bitcoin Core repo [#29432](https://github.com/bitcoin/bitcoin/pull/29432) which can be tested and reviewed. We’re inviting code reviewers to take a look at smaller PR’s that build [#2943](https://github.com/bitcoin/bitcoin/pull/29432).\n\n## 🙏 Thank you!\n\nSRI 1.0.0 wouldn’t be possible without our contributors, supporters, working group, testers, and community. Since our last update, our contributor base has grown even further! What once started as a one-man project, is now a community of contributors building backbone infrastructure for the entire mining industry.\n\nA huge shout-out to: fi3, gitgab19, pavlenex, plebhash, priceless-p, satsie, sjors, ccdle12, darricksee, jakubtrnka, lobarrel, lorbax, rrybarczyk, vincenzopalazzo, 4ss0, 0xSaksham and many more!\n\nThanks to [HRF](http://hrf.org), [OpenSats](https://opensats.org), and [Spiral](http://spiral.xyz) for supporting contributors through grants and donations, ensuring the project's sustainability.\nSpecial thanks to [Santacroce](https://santacroce.xyz/), [Hut8](http://hut8.io), and Oblast63 for providing the equipment for community testing, and to the working group members, including [Braiins](https://braiins.com) and others, for their role in refining the specifications.\n\n## 🎁 Support us\n\n- Individuals can support the development and maintenance of the SRI by [donating through OpenSats](https://opensats.org/projects/stratumv2), a 501(c)(3) public charity dedicated to supporting open-source Bitcoin projects.\n- Corporate entities interested in providing grants to SRI contributors, please get in touch with us directly. Your support can make a significant difference in accelerating development, research, and innovation. Please [get in touch](mailto:stratumv2@gmail.com)\n- Contribute - We’re inviting developers interested in contributing to SRI to look into our codebase, study the specs and join our regular weekly developer meetings on Discord to get up to speed and get proper onboarding.\n\n## 🏁 Dive in\n\nAfter months of testing, including over [600 blocks](https://mempool.space/testnet/address/tb1qa0sm0hxzj0x25rh8gw5xlzwlsfvvyz8u96w3p8) mined on testnet, we are confident to invite you to [experience SRI 1.0.0](https://stratumprotocol.org/getting-started/) firsthand.\n\nYour feedback, issue reports, and feature suggestions are invaluable to us, directly shaping the future of SRI. For the most straightforward experience, consider running the full stack locally or connecting to our community-supported infrastructure.\n\nTo ensure SRI 1.0.0 works seamlessly across various setups, we encourage you to [share your testing experience](https://forms.gle/QAX3hriMzKAMELFB6).\n\nPlease [report](https://github.com/stratum-mining/stratum/issues) any inconveniences or bugs, and feel free to ask for assistance through [Discord](https://discord.gg/stEjAZ2y8r). Your active participation is crucial in refining and enhancing our software for everyone.\n\n**Start your SV2 journey [here](https://stratumprotocol.org/getting-started/).**\n",
    "html": "<p>We are thrilled to announce the launch of SRI <a href=\"https://github.com/stratum-mining/stratum/releases\">1.0.0</a>! This marks an important milestone in our mission to decentralize and enhance bitcoin mining and stands ready for immediate testing and integration.</p>\n<p>Start your SV2 journey with our <a href=\"https://stratumprotocol.org/getting-started/\">getting started guide</a>.</p>\n<h2>🛎️ Key highlights</h2>\n<p><a href=\"https://www.youtube.com/watch?v=cyduxNB5R7E\"><img src=\"https://img.youtube.com/vi/cyduxNB5R7E/mqdefault.jpg\" alt=\"SRI 1.0.0 Announcement\"></a></p>\n<h3>👷 Miners</h3>\n<ul>\n<li>Connect to a SV2 pool without upgrading existing SV1 firmware through Translation Proxy or</li>\n<li>Connect to an SV2 pool directly with an SV2 firmware device (BraiinsOS)</li>\n<li>Run you own bitcoin node, construct templates, and declare them to the SV2 Pool</li>\n<li>Utilize pool fallback functionality in case the pool decides to censor</li>\n</ul>\n<h3>🛠️ Pools</h3>\n<ul>\n<li>Deploy and operate a very simple SV2 Pool</li>\n<li>Integrate SV2 into an existing pool through our libraries</li>\n</ul>\n<p>The new version is a result of improvements in the Stratum V2 <a href=\"https://github.com/stratum-mining/sv2-spec\">specification</a> through the working <a href=\"https://www.cnbc.com/2022/10/11/bitcoin-mining-software-overhaul-stratum-v2-promoted-by-block-braiins.html\">group</a> collaboration and rigorous testing with our interoperability suite to ensure compatibility between the two implementations of the Stratum V2 protocol.</p>\n<p>As we planned <a href=\"https://stratumprotocol.org/blog/sri-roadmap-2023/\">eight months ago</a>, the release allows miners running SV1 or SV2 firmware to connect to an SV2 Pool (directly or through a translation proxy), optionally using a locally hosted Job Declaration Client and a patched version of a Bitcoin Core Node to <strong>construct their own block templates</strong> which are then sent to the Job Declarator Server run by the SV2 Pool. It’s important to mention that our code refactoring introduced the ability for the node and JDC to be run by an independent third-party, not just the miners.</p>\n<p><img src=\"/assets/config-a.svg\" alt=\"Config A\"></p>\n<p>The newly implemented <strong>pool fallback functionality</strong> ensures that if a pool rejects a miner’s template, the miner’s Job Declarator Client automatically switches to an alternative pool. Miners can configure several fallback options and if all listed pools decide to censor, miners will end up solo mining. This serves as a powerful incentive for pools to act in the best interest of miners, as rejecting templates without a valid reason could lead to a significant loss of hash power to competitors. If all miners run standardized software, the entire hash rate of the pool could end up with a competing pool.</p>\n<p>Aside from pools rejecting templates with transactions they wish to censor, there are several other scenarios where template rejection could trigger the pool fallback feature:</p>\n<ul>\n<li>A bug in the pool or downstream</li>\n<li>A connection interruption between the pool and downstream</li>\n<li>Downstream creates custom templates below the acceptable fee policy defined by the pool</li>\n</ul>\n<p><strong>SRI’s pool</strong> is simple and opinionated and currently can receive a template from the Template Provider, and create jobs for the downstream with the adequate difficulty. Anyone can easily deploy this simple pool today or use our libraries to integrate into their existing operations. Going forward, we plan to continue refactoring our code to allow for more diverse use-cases. Anyone interested in integrating SV2 into an existing pool, or starting a brand-new pool, <a href=\"https://discord.gg/stEjAZ2y8r\">let us know</a>, we’d love to collaborate more closely. One example of a pool using SRI in production is <a href=\"https://www.dmnd.work/\">DMND</a>.</p>\n<p><strong>Template Provider</strong> enables the selection of transactions from the locally-run bitcoin node. Miners (soon, also independent third parties) can create custom block templates and declare custom mining jobs to the pool. Currently, to use the Template Provider you need to use our patched version of Bitcoin Core. Sjors Provoost opened a pull request in the Bitcoin Core repo <a href=\"https://github.com/bitcoin/bitcoin/pull/29432\">#29432</a> which can be tested and reviewed. We’re inviting code reviewers to take a look at smaller PR’s that build <a href=\"https://github.com/bitcoin/bitcoin/pull/29432\">#2943</a>.</p>\n<h2>🙏 Thank you!</h2>\n<p>SRI 1.0.0 wouldn’t be possible without our contributors, supporters, working group, testers, and community. Since our last update, our contributor base has grown even further! What once started as a one-man project, is now a community of contributors building backbone infrastructure for the entire mining industry.</p>\n<p>A huge shout-out to: fi3, gitgab19, pavlenex, plebhash, priceless-p, satsie, sjors, ccdle12, darricksee, jakubtrnka, lobarrel, lorbax, rrybarczyk, vincenzopalazzo, 4ss0, 0xSaksham and many more!</p>\n<p>Thanks to <a href=\"http://hrf.org\">HRF</a>, <a href=\"https://opensats.org\">OpenSats</a>, and <a href=\"http://spiral.xyz\">Spiral</a> for supporting contributors through grants and donations, ensuring the project’s sustainability.\nSpecial thanks to <a href=\"https://santacroce.xyz/\">Santacroce</a>, <a href=\"http://hut8.io\">Hut8</a>, and Oblast63 for providing the equipment for community testing, and to the working group members, including <a href=\"https://braiins.com\">Braiins</a> and others, for their role in refining the specifications.</p>\n<h2>🎁 Support us</h2>\n<ul>\n<li>Individuals can support the development and maintenance of the SRI by <a href=\"https://opensats.org/projects/stratumv2\">donating through OpenSats</a>, a 501©(3) public charity dedicated to supporting open-source Bitcoin projects.</li>\n<li>Corporate entities interested in providing grants to SRI contributors, please get in touch with us directly. Your support can make a significant difference in accelerating development, research, and innovation. Please <a href=\"mailto:stratumv2@gmail.com\">get in touch</a></li>\n<li>Contribute - We’re inviting developers interested in contributing to SRI to look into our codebase, study the specs and join our regular weekly developer meetings on Discord to get up to speed and get proper onboarding.</li>\n</ul>\n<h2>🏁 Dive in</h2>\n<p>After months of testing, including over <a href=\"https://mempool.space/testnet/address/tb1qa0sm0hxzj0x25rh8gw5xlzwlsfvvyz8u96w3p8\">600 blocks</a> mined on testnet, we are confident to invite you to <a href=\"https://stratumprotocol.org/getting-started/\">experience SRI 1.0.0</a> firsthand.</p>\n<p>Your feedback, issue reports, and feature suggestions are invaluable to us, directly shaping the future of SRI. For the most straightforward experience, consider running the full stack locally or connecting to our community-supported infrastructure.</p>\n<p>To ensure SRI 1.0.0 works seamlessly across various setups, we encourage you to <a href=\"https://forms.gle/QAX3hriMzKAMELFB6\">share your testing experience</a>.</p>\n<p>Please <a href=\"https://github.com/stratum-mining/stratum/issues\">report</a> any inconveniences or bugs, and feel free to ask for assistance through <a href=\"https://discord.gg/stEjAZ2y8r\">Discord</a>. Your active participation is crucial in refining and enhancing our software for everyone.</p>\n<p><strong>Start your SV2 journey <a href=\"https://stratumprotocol.org/getting-started/\">here</a>.</strong></p>\n"
  },
  {
    "slug": "sri-roadmap-2023",
    "title": " Stratum V2 (SRI) Roadmap - To infinity and beyond ",
    "description": "Today, we’re sharing the  (Stratum Reference Implementation) roadmap providing insights into our ongoing work and the project's direction. Additionally, we are publishing the latest progress on Stratum V2 protocol specifications, further emphasizing our commitment to openness and building in public.",
    "date": "2023-08-03",
    "formattedDate": "Aug 3, 2023",
    "authors": ["Pavlenex"],
    "tags": ["StratumV2", "Sri", "Roadmap"],
    "content": "\nToday, we’re sharing the (Stratum Reference Implementation) **roadmap** providing insights into our ongoing work and the project's direction. Additionally, we are publishing the latest progress on Stratum V2 protocol **specifications**, further emphasizing our commitment to openness and building in public.\n\nWe believe fostering collaboration and transparency in the development process accelerates community involvement and brings us one step closer to our mission - better, more robust, and more decentralized bitcoin mining.\n\nAt its core, SRI is a community-driven, open-source project. Our roadmap reflects the consensus reached within the community, constantly evolving with the collective input of every one of us.\n\nWe welcome you to join us in our mission, start contributing, testing and help us shape the future of bitcoin mining.\n\n## 📖 Stratum V2 specification\n\nThe specification is the heart of any protocol. The Stratum V2 specification, meticulously maintained by an independent open-source working group [formed](https://www.cnbc.com/2022/10/11/bitcoin-mining-software-overhaul-stratum-v2-promoted-by-block-braiins.html) in October 2022, is pivotal in defining the functionality. Since its inception, the specs have undergone several updates to enhance security, performance, flexibility, and simplicity.\n\nThe main goal is to **stabilize** the specification, **formalize** the proposal procedures, and make them **accessible** to anyone interested in improving the Stratum V2.\n\nThe table below summarizes the changelog of notable specs updates.\n\n| Notable update                              | Link to a pull request                                     |\n| :------------------------------------------ | :--------------------------------------------------------- |\n| Noise handshake improvement                 | [#2](https://github.com/stratum-mining/sv2-spec/pull/2)    |\n| Using Bitcoin core cryptographic primitives | [#10](https://github.com/stratum-mining/sv2-spec/pull/10)  |\n| Replace future_job with min_ntime           | [#12](https://github.com/stratum-mining/sv2-spec/pull/12/) |\n| Message framework improvement               | [#40](https://github.com/stratum-mining/sv2-spec/pull/40)  |\n| Rename Job Negotiator to Job Declarator     | [#43](https://github.com/stratum-mining/sv2-spec/pull/43)  |\n\n### Noise handshake improvement\n\nOne of our first updates is improving the noise handshake. The Stratum V2 protocol updates refine the authenticated key agreement through a three-step process, **enhancing security and communication efficiency**. This includes, an exchange of keys, followed by an Elliptic Curve Diffie-Hellman (ECDH) operation, encryption algorithm negotiation and server authentication through a signature noise message.\n\n### Using Bitcoin Core cryptographic primitives\n\nThe PR #10 implemented Bitcoin Core's cryptographic primitives, shifting from curve25519 to secp256k1 and from Blake2s to SHA256 for hashing. It introduces Schnorr/secp256k1 for server authentication, necessitating updates to CA-authority public keys and supports handshake with two different AEAD algorithms. The update **simplifies handshake messages** by eliminating unnecessary length prefixes and thoroughly describes each handshake step, moving the noise-secure layer description into a separate file.\n\n### Replace future_job with min_ntime\n\nPreviously, 'future_job' indicated whether a job related to a future or the last sent 'SetNewPrevHash' message on the channel. Now, 'min_ntime' serves this function, remaining empty for future jobs and filled with 'min_ntime' for immediate jobs linked to the last sent 'SetNewPrevHash'. This change offers a more **granular control over job allocation** and initiation in the mining protocol.\n\n### Message framing improvement\n\nThis update enhances the message framework by incorporating the security layer into the stratum framing itself, thus eliminating the need for redundant frame-length information and improving protocol efficiency. In the previous framework, individual frame lengths were revealed in the TCP traffic, creating potential vulnerabilities.\n\nThe new framework encrypts the Stratum V2 payload in byte chunks of maximum 65519 bytes and v2 header in 22 bytes forming AEAD ciphertexts, effectively concealing and protecting the frame length field and facilitating implementation of large-message encoding. This change **streamlines the parsing process**, making the TCP-transcript fully uniform and random looking.\n\n### Renaming Job Negotiator to Job Declarator\n\nIn response to community feedback regarding a protocol formerly known as **\"Job Negotiator\"**, we are announcing a naming update to clarify its purpose and functionality.\n\nThis protocol is one of the most critical features of Stratum V2. In combination with a template provider, it allows miners or an independent third party to select transactions, decentralizing bitcoin pool infrastructure.\n\nOver time, we've observed confusion surrounding the term \"negotiation,\" as it may imply a back-and-forth process between miners and pools to determine block content. We want to stress that this is not the case. Instead, the miner declares transactions to the pool, which can then choose to accept or decline them. There is no ongoing communication concerning block content between parties.\n\nIn cases where a pool accepts the declared transactions, they are subsequently propagated to the bitcoin network. Conversely, if a pool declines the transactions (censors), the miner will automatically seek an alternative pool. If the secondary pool also declines to include the transactions, the miner will continue to fall back, eventually resorting to solo mining.\n\nProvided that all miners run standardized software this could mean that the **entire hashrate** of pools that is censoring would end up with their competitors, or eventually solo mine.\n\nWith this in mind, we’re **renaming the Job Netogiation to Job Declaration protocol**.\n\n## 👷‍♂️ Stratum V2 implementations\n\nThus far, there have been two adoption paths for the Stratum V2 protocol:\n\n- Stratum V2 implementation by Braiins\n- SRI (Stratum V2 Reference implementation)\n\nBoth implementers, Braiins, and SRI, are part of the SV2 working group and share the goal of fostering a collaborative environment to support and encourage the broader adoption of Stratum V2. The remaining of the article will focus on the reference implementation, SRI, exploring its current status and future direction.\n\n### 🛣️ Stratum Reference Implementation Roadmap\n\nIn October 2022, we launched our SRI’s [first update](https://twitter.com/StratumV2/status/1579805619351326722?s=20), which allowed miners to run Stratum V1 firmware and connect to an SV2 compatible pool. Few months afterwards, [a new update](https://twitter.com/StratumV2/status/1646542195233640454?s=20) allowed miners to select transactions, democratizing block selection.\n\nCurrently we’re working on our **third major update**, below is an overview on what to expect in the future.\n\n![SRI Roadmap](/assets/SRI-roadmap-2023.png)\n\nThe third update represents our **“Now”** column on our roadmap, and aims to be completed in the next few months. It builds on all previous updates with more features, enhanced security performance and better flexibility. Most importantly the new update, should set the milestone for easier Stratum V2 integrations into existing pools. Miners and mining pools are encouraged to test out our [previous update](https://stratumprotocol.org/blog/stratumv2-jn-announcement/) and provide feedback in the meanwhile.\n\n**Our always evolving roadmap is available on [Miro](https://miro.com/app/board/uXjVM8FOwSE=/?share_link_id=902364718672), and also on [GitHub](https://github.com/orgs/stratum-mining/projects/5) for anyone to review and provide feedback. If you’re interested in joining our contributors team, hop on to [Discord](https://discord.gg/fsEW23wFYs).**\n\n### Message Generator - interoperability suite\n\nAs the Stratum V2 protocol gains popularity, we anticipate the emergence of various adoption paths. However, it is imperative that these implementations adhere closely to the specified standards. Deviation from the protocol specifications could yield catastrophic consequences, potentially resulting in significant profit loss.\n\nBecause of this, we developed an interoperability suite called **Message Generator** (or MG), which is essential in ensuring that all implementations are following the specs, and are able to test against each other. The tool allows anyone developing Stratum V2 based software to run a series of predefined tests in different configurations to ensure compatibility.\n\nMG is stateful, meaning it can save a value of an SV2 message received by the tested software to be sent later in another message. The logic of the stateful MG makes it easier to implement arbitrary actions on MG, allowing the MG to send SV2 messages where the fields' values are randomly chosen by the software, rather than the user. This represents a form of property-based testing. Currently, the implementation of arbitrary for MG is still a work in progress.\n\nThe following are the next steps for MG:\n\n- Implement arbitrary functionality\n- Write additional MG tests\n- Extend MG support to SV1 messages\n\n### 👩‍💻SRI Stack\n\nThus far, SRI’s architecture bundled some of the roles together. We’ve realized that having not overly specialized roles would ensure less bug-prone codebase, and also allow us to easier debug issues.\n\nWe’re now working on refactoring those roles, that would allow us to have:\n\n- **SV2 pool** that doesn’t have built in job-declaration\n- **SV2 mining-proxy** that does downstream aggregation/load balancing.\n- **Translator-proxy** that does SV1 to SV2 translation\n- **Job-declarator-client** that does job declaration\n- **Job-declarator-server** that accepts or declines jobs and does block propagation\n\n#### Stratum V2 Pool\n\nThe ability for **existing pools** to easily **integrate SV2** is our highest priority. This requires that we develop an HTTP API. Certain mining pools aim to monitor their clients' mining devices in order to display a malfunctioning device, or generally showcase additional data on their web app. This can be easily achieved by tracking the shares submitted by each device. We’re working on adding this in the form of an extension to the SRI, as a **monitoring-extension**.\n\n**Pool fallback**, described in the Job Declaration section above, would allow miners to easily fall-back to an alternative pool or solo mine if alternative pool(s) decline declared transactions is critical in ensuring decentralization of the protocol.\n\nAdding **pool’s signature** after extranonce, generating a **coinbase** with any, not just p2pkh script as pool's output are also on our roadmap.\n\n**Anyone** being able to **run and deploy a pool** is high on our priority list and would help with decentralization of power even more. That’s why our next focus will be to ensure our open-source stack can achieve that. We plan to develop a highly-customizable web UI for the pool.\n\n**Separating** the job-declarator from the pool into a job-declarator server allowing greater flexibility when deploying a Job declarator.\n\n#### Job Declarator\n\nWe’ve mentioned Job Declarator, as one of the most important aspects of SRI through this blog post. For greater flexibility, we’re refactoring the code and are working towards a **standalone Job Declarator** which would consist of JD-Server (Pool) and JD-Client (miner). Here’s what’s on our roadmap:\n\n- Refactoring the code that has already been started to separate various components (mining, pool, and Job Declarator)\n- Implementation of a Job Declarator Server in the pool\n- Implementation of cryptographic signature by the JD server in the token that identifies the custom job\n- Completion of the remaining messages so that the pool can propagate the block, enabling two parallel block propagations. The found block could be propagated by both miner’s and pool's bitcoin node.\n\n#### Template provider\n\nThe template-provider generates block templates and passes them to the pool or the job-declarator using the Template Distribution protocol. Template provider is most commonly a bitcoin core full node, but can be any other node implementation.\n\nWe’ve [submitted a PR](https://github.com/bitcoin/bitcoin/pull/27854) to add template provider to bitcoin core. The goal of opening a PR in this stage was to get concept acknowledgment from core developers and community. Thus far we’re received valuable feedback and are working towards implementing suggested changes. Unlike the [previous PR](https://github.com/bitcoin/bitcoin/pull/23049) which used rust-library, the new PR implements server and message serialization and deserialization in C++.\n\nNext, we’ll be adding **noise handshake encryption**, and **framing** improvement as per recent specs changes. Same changes need to be added to the SRI codebase.\n\nWe would like to thank everyone who has reviewed the PR thus far, and would like to invite more developers to take a look at it and provide feedback.\n\nAfter those updates are added, we will be **converting PR from draft to ready to review**. Hopefully after enough reviews and community consensus, the PR gets merged into the bitcoin core codebase. Meanwhile, miners wanting to help test and use the SV2 template provider can use our patched version.\n\n#### Proxies\n\nAll miners use proxies to aggregate connections and save on bandwidth. In SRI we have two types of proxies:\n\n- Translation Proxy\n- SV2 Proxy\n\n**Translation proxy** is something we worked on and deployed in October 2022. It allows miners running sv1 firmware to connect to an SV2 pool, by converting messages from SV1 to SV2 and vice versa. This means that miners don’t have to update firmware to use Stratum V2. Translation proxy has been tested and stabilized.\n\nOne of our goals in the future is to develop a **pure SV2 proxy**, that would aggregate connections from mining devices running SV2 firmware. Further improving mining-proxy means that we would be adding **web-ui** for easier management of devices by the miners at some point in the future.\n\n#### Benchmarking\n\nIt’s not an unknown fact that miners by nature are very rational actors in the ecosystem. With that in mind, their actions are usually profit-driven. To ensure Stratum V2 adoption, we’ve started developing a testing & benchmarking suite which would allow industry to easily compare Stratum V2 performance against Stratum V1 in different mining scenarios. Such tool should provide data that will help miners evaluate profitability and performance and make an informed decision. We will be documenting benchmarking results in the form of a report/case-study and sharing it with the industry.\n\nThe benchmarking suite will include:\n\n- Dockerized roles for both Stratum V1 and Stratum V2;\n- Possibility to benchmark protocols in regtest, testnet and possibly mainnet;\n- Possibility to easily benchmark different configurations permitted by SRI stack;\n- Web UI to easily interact with the benchmarking suite;\n- Dockerized metrics collector and visualizer such as Prometheus, Criterion, Grafana, etc.\n\n#### Firmware\n\nIn the future, as our contributors base grows, we’re hoping to kick-start the [firmware-bindings](https://docs.google.com/document/d/1iW48-Y4Xvr2IN7PU_9xYw-i5wReCQ98SyliI55_LSos/edit) as part of our efforts to support downstream firmware applications.\n\n#### Contributors\n\nAs you may have noticed, Stratum V2 and SRI will aim to have a lot of new features, improvements and big plans. We could never develop software without our community who has been actively helping us by testing the software and providing feedback. Thank you for your efforts.\n\nWe’re a small team of contributors with big dreams, to make that happen, **we need more people to join us in our mission** of decentralizing and improving bitcoin mining and we’re welcoming anyone interested in contributing to join us on [Discord](https://discord.gg/fsEW23wFYs).\n",
    "html": "<p>Today, we’re sharing the (Stratum Reference Implementation) <strong>roadmap</strong> providing insights into our ongoing work and the project’s direction. Additionally, we are publishing the latest progress on Stratum V2 protocol <strong>specifications</strong>, further emphasizing our commitment to openness and building in public.</p>\n<p>We believe fostering collaboration and transparency in the development process accelerates community involvement and brings us one step closer to our mission - better, more robust, and more decentralized bitcoin mining.</p>\n<p>At its core, SRI is a community-driven, open-source project. Our roadmap reflects the consensus reached within the community, constantly evolving with the collective input of every one of us.</p>\n<p>We welcome you to join us in our mission, start contributing, testing and help us shape the future of bitcoin mining.</p>\n<h2>📖 Stratum V2 specification</h2>\n<p>The specification is the heart of any protocol. The Stratum V2 specification, meticulously maintained by an independent open-source working group <a href=\"https://www.cnbc.com/2022/10/11/bitcoin-mining-software-overhaul-stratum-v2-promoted-by-block-braiins.html\">formed</a> in October 2022, is pivotal in defining the functionality. Since its inception, the specs have undergone several updates to enhance security, performance, flexibility, and simplicity.</p>\n<p>The main goal is to <strong>stabilize</strong> the specification, <strong>formalize</strong> the proposal procedures, and make them <strong>accessible</strong> to anyone interested in improving the Stratum V2.</p>\n<p>The table below summarizes the changelog of notable specs updates.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Notable update</th>\n<th style=\"text-align:left\">Link to a pull request</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Noise handshake improvement</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/stratum-mining/sv2-spec/pull/2\">#2</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using Bitcoin core cryptographic primitives</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/stratum-mining/sv2-spec/pull/10\">#10</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Replace future_job with min_ntime</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/stratum-mining/sv2-spec/pull/12/\">#12</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Message framework improvement</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/stratum-mining/sv2-spec/pull/40\">#40</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rename Job Negotiator to Job Declarator</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/stratum-mining/sv2-spec/pull/43\">#43</a></td>\n</tr>\n</tbody>\n</table>\n<h3>Noise handshake improvement</h3>\n<p>One of our first updates is improving the noise handshake. The Stratum V2 protocol updates refine the authenticated key agreement through a three-step process, <strong>enhancing security and communication efficiency</strong>. This includes, an exchange of keys, followed by an Elliptic Curve Diffie-Hellman (ECDH) operation, encryption algorithm negotiation and server authentication through a signature noise message.</p>\n<h3>Using Bitcoin Core cryptographic primitives</h3>\n<p>The PR #10 implemented Bitcoin Core’s cryptographic primitives, shifting from curve25519 to secp256k1 and from Blake2s to SHA256 for hashing. It introduces Schnorr/secp256k1 for server authentication, necessitating updates to CA-authority public keys and supports handshake with two different AEAD algorithms. The update <strong>simplifies handshake messages</strong> by eliminating unnecessary length prefixes and thoroughly describes each handshake step, moving the noise-secure layer description into a separate file.</p>\n<h3>Replace future_job with min_ntime</h3>\n<p>Previously, ‘future_job’ indicated whether a job related to a future or the last sent ‘SetNewPrevHash’ message on the channel. Now, ‘min_ntime’ serves this function, remaining empty for future jobs and filled with ‘min_ntime’ for immediate jobs linked to the last sent ‘SetNewPrevHash’. This change offers a more <strong>granular control over job allocation</strong> and initiation in the mining protocol.</p>\n<h3>Message framing improvement</h3>\n<p>This update enhances the message framework by incorporating the security layer into the stratum framing itself, thus eliminating the need for redundant frame-length information and improving protocol efficiency. In the previous framework, individual frame lengths were revealed in the TCP traffic, creating potential vulnerabilities.</p>\n<p>The new framework encrypts the Stratum V2 payload in byte chunks of maximum 65519 bytes and v2 header in 22 bytes forming AEAD ciphertexts, effectively concealing and protecting the frame length field and facilitating implementation of large-message encoding. This change <strong>streamlines the parsing process</strong>, making the TCP-transcript fully uniform and random looking.</p>\n<h3>Renaming Job Negotiator to Job Declarator</h3>\n<p>In response to community feedback regarding a protocol formerly known as <strong>“Job Negotiator”</strong>, we are announcing a naming update to clarify its purpose and functionality.</p>\n<p>This protocol is one of the most critical features of Stratum V2. In combination with a template provider, it allows miners or an independent third party to select transactions, decentralizing bitcoin pool infrastructure.</p>\n<p>Over time, we’ve observed confusion surrounding the term “negotiation,” as it may imply a back-and-forth process between miners and pools to determine block content. We want to stress that this is not the case. Instead, the miner declares transactions to the pool, which can then choose to accept or decline them. There is no ongoing communication concerning block content between parties.</p>\n<p>In cases where a pool accepts the declared transactions, they are subsequently propagated to the bitcoin network. Conversely, if a pool declines the transactions (censors), the miner will automatically seek an alternative pool. If the secondary pool also declines to include the transactions, the miner will continue to fall back, eventually resorting to solo mining.</p>\n<p>Provided that all miners run standardized software this could mean that the <strong>entire hashrate</strong> of pools that is censoring would end up with their competitors, or eventually solo mine.</p>\n<p>With this in mind, we’re <strong>renaming the Job Netogiation to Job Declaration protocol</strong>.</p>\n<h2>👷‍♂️ Stratum V2 implementations</h2>\n<p>Thus far, there have been two adoption paths for the Stratum V2 protocol:</p>\n<ul>\n<li>Stratum V2 implementation by Braiins</li>\n<li>SRI (Stratum V2 Reference implementation)</li>\n</ul>\n<p>Both implementers, Braiins, and SRI, are part of the SV2 working group and share the goal of fostering a collaborative environment to support and encourage the broader adoption of Stratum V2. The remaining of the article will focus on the reference implementation, SRI, exploring its current status and future direction.</p>\n<h3>🛣️ Stratum Reference Implementation Roadmap</h3>\n<p>In October 2022, we launched our SRI’s <a href=\"https://twitter.com/StratumV2/status/1579805619351326722?s=20\">first update</a>, which allowed miners to run Stratum V1 firmware and connect to an SV2 compatible pool. Few months afterwards, <a href=\"https://twitter.com/StratumV2/status/1646542195233640454?s=20\">a new update</a> allowed miners to select transactions, democratizing block selection.</p>\n<p>Currently we’re working on our <strong>third major update</strong>, below is an overview on what to expect in the future.</p>\n<p><img src=\"/assets/SRI-roadmap-2023.png\" alt=\"SRI Roadmap\"></p>\n<p>The third update represents our <strong>“Now”</strong> column on our roadmap, and aims to be completed in the next few months. It builds on all previous updates with more features, enhanced security performance and better flexibility. Most importantly the new update, should set the milestone for easier Stratum V2 integrations into existing pools. Miners and mining pools are encouraged to test out our <a href=\"https://stratumprotocol.org/blog/stratumv2-jn-announcement/\">previous update</a> and provide feedback in the meanwhile.</p>\n<p><strong>Our always evolving roadmap is available on <a href=\"https://miro.com/app/board/uXjVM8FOwSE=/?share_link_id=902364718672\">Miro</a>, and also on <a href=\"https://github.com/orgs/stratum-mining/projects/5\">GitHub</a> for anyone to review and provide feedback. If you’re interested in joining our contributors team, hop on to <a href=\"https://discord.gg/fsEW23wFYs\">Discord</a>.</strong></p>\n<h3>Message Generator - interoperability suite</h3>\n<p>As the Stratum V2 protocol gains popularity, we anticipate the emergence of various adoption paths. However, it is imperative that these implementations adhere closely to the specified standards. Deviation from the protocol specifications could yield catastrophic consequences, potentially resulting in significant profit loss.</p>\n<p>Because of this, we developed an interoperability suite called <strong>Message Generator</strong> (or MG), which is essential in ensuring that all implementations are following the specs, and are able to test against each other. The tool allows anyone developing Stratum V2 based software to run a series of predefined tests in different configurations to ensure compatibility.</p>\n<p>MG is stateful, meaning it can save a value of an SV2 message received by the tested software to be sent later in another message. The logic of the stateful MG makes it easier to implement arbitrary actions on MG, allowing the MG to send SV2 messages where the fields’ values are randomly chosen by the software, rather than the user. This represents a form of property-based testing. Currently, the implementation of arbitrary for MG is still a work in progress.</p>\n<p>The following are the next steps for MG:</p>\n<ul>\n<li>Implement arbitrary functionality</li>\n<li>Write additional MG tests</li>\n<li>Extend MG support to SV1 messages</li>\n</ul>\n<h3>👩‍💻SRI Stack</h3>\n<p>Thus far, SRI’s architecture bundled some of the roles together. We’ve realized that having not overly specialized roles would ensure less bug-prone codebase, and also allow us to easier debug issues.</p>\n<p>We’re now working on refactoring those roles, that would allow us to have:</p>\n<ul>\n<li><strong>SV2 pool</strong> that doesn’t have built in job-declaration</li>\n<li><strong>SV2 mining-proxy</strong> that does downstream aggregation/load balancing.</li>\n<li><strong>Translator-proxy</strong> that does SV1 to SV2 translation</li>\n<li><strong>Job-declarator-client</strong> that does job declaration</li>\n<li><strong>Job-declarator-server</strong> that accepts or declines jobs and does block propagation</li>\n</ul>\n<h4>Stratum V2 Pool</h4>\n<p>The ability for <strong>existing pools</strong> to easily <strong>integrate SV2</strong> is our highest priority. This requires that we develop an HTTP API. Certain mining pools aim to monitor their clients’ mining devices in order to display a malfunctioning device, or generally showcase additional data on their web app. This can be easily achieved by tracking the shares submitted by each device. We’re working on adding this in the form of an extension to the SRI, as a <strong>monitoring-extension</strong>.</p>\n<p><strong>Pool fallback</strong>, described in the Job Declaration section above, would allow miners to easily fall-back to an alternative pool or solo mine if alternative pool(s) decline declared transactions is critical in ensuring decentralization of the protocol.</p>\n<p>Adding <strong>pool’s signature</strong> after extranonce, generating a <strong>coinbase</strong> with any, not just p2pkh script as pool’s output are also on our roadmap.</p>\n<p><strong>Anyone</strong> being able to <strong>run and deploy a pool</strong> is high on our priority list and would help with decentralization of power even more. That’s why our next focus will be to ensure our open-source stack can achieve that. We plan to develop a highly-customizable web UI for the pool.</p>\n<p><strong>Separating</strong> the job-declarator from the pool into a job-declarator server allowing greater flexibility when deploying a Job declarator.</p>\n<h4>Job Declarator</h4>\n<p>We’ve mentioned Job Declarator, as one of the most important aspects of SRI through this blog post. For greater flexibility, we’re refactoring the code and are working towards a <strong>standalone Job Declarator</strong> which would consist of JD-Server (Pool) and JD-Client (miner). Here’s what’s on our roadmap:</p>\n<ul>\n<li>Refactoring the code that has already been started to separate various components (mining, pool, and Job Declarator)</li>\n<li>Implementation of a Job Declarator Server in the pool</li>\n<li>Implementation of cryptographic signature by the JD server in the token that identifies the custom job</li>\n<li>Completion of the remaining messages so that the pool can propagate the block, enabling two parallel block propagations. The found block could be propagated by both miner’s and pool’s bitcoin node.</li>\n</ul>\n<h4>Template provider</h4>\n<p>The template-provider generates block templates and passes them to the pool or the job-declarator using the Template Distribution protocol. Template provider is most commonly a bitcoin core full node, but can be any other node implementation.</p>\n<p>We’ve <a href=\"https://github.com/bitcoin/bitcoin/pull/27854\">submitted a PR</a> to add template provider to bitcoin core. The goal of opening a PR in this stage was to get concept acknowledgment from core developers and community. Thus far we’re received valuable feedback and are working towards implementing suggested changes. Unlike the <a href=\"https://github.com/bitcoin/bitcoin/pull/23049\">previous PR</a> which used rust-library, the new PR implements server and message serialization and deserialization in C++.</p>\n<p>Next, we’ll be adding <strong>noise handshake encryption</strong>, and <strong>framing</strong> improvement as per recent specs changes. Same changes need to be added to the SRI codebase.</p>\n<p>We would like to thank everyone who has reviewed the PR thus far, and would like to invite more developers to take a look at it and provide feedback.</p>\n<p>After those updates are added, we will be <strong>converting PR from draft to ready to review</strong>. Hopefully after enough reviews and community consensus, the PR gets merged into the bitcoin core codebase. Meanwhile, miners wanting to help test and use the SV2 template provider can use our patched version.</p>\n<h4>Proxies</h4>\n<p>All miners use proxies to aggregate connections and save on bandwidth. In SRI we have two types of proxies:</p>\n<ul>\n<li>Translation Proxy</li>\n<li>SV2 Proxy</li>\n</ul>\n<p><strong>Translation proxy</strong> is something we worked on and deployed in October 2022. It allows miners running sv1 firmware to connect to an SV2 pool, by converting messages from SV1 to SV2 and vice versa. This means that miners don’t have to update firmware to use Stratum V2. Translation proxy has been tested and stabilized.</p>\n<p>One of our goals in the future is to develop a <strong>pure SV2 proxy</strong>, that would aggregate connections from mining devices running SV2 firmware. Further improving mining-proxy means that we would be adding <strong>web-ui</strong> for easier management of devices by the miners at some point in the future.</p>\n<h4>Benchmarking</h4>\n<p>It’s not an unknown fact that miners by nature are very rational actors in the ecosystem. With that in mind, their actions are usually profit-driven. To ensure Stratum V2 adoption, we’ve started developing a testing &amp; benchmarking suite which would allow industry to easily compare Stratum V2 performance against Stratum V1 in different mining scenarios. Such tool should provide data that will help miners evaluate profitability and performance and make an informed decision. We will be documenting benchmarking results in the form of a report/case-study and sharing it with the industry.</p>\n<p>The benchmarking suite will include:</p>\n<ul>\n<li>Dockerized roles for both Stratum V1 and Stratum V2;</li>\n<li>Possibility to benchmark protocols in regtest, testnet and possibly mainnet;</li>\n<li>Possibility to easily benchmark different configurations permitted by SRI stack;</li>\n<li>Web UI to easily interact with the benchmarking suite;</li>\n<li>Dockerized metrics collector and visualizer such as Prometheus, Criterion, Grafana, etc.</li>\n</ul>\n<h4>Firmware</h4>\n<p>In the future, as our contributors base grows, we’re hoping to kick-start the <a href=\"https://docs.google.com/document/d/1iW48-Y4Xvr2IN7PU_9xYw-i5wReCQ98SyliI55_LSos/edit\">firmware-bindings</a> as part of our efforts to support downstream firmware applications.</p>\n<h4>Contributors</h4>\n<p>As you may have noticed, Stratum V2 and SRI will aim to have a lot of new features, improvements and big plans. We could never develop software without our community who has been actively helping us by testing the software and providing feedback. Thank you for your efforts.</p>\n<p>We’re a small team of contributors with big dreams, to make that happen, <strong>we need more people to join us in our mission</strong> of decentralizing and improving bitcoin mining and we’re welcoming anyone interested in contributing to join us on <a href=\"https://discord.gg/fsEW23wFYs\">Discord</a>.</p>\n"
  },
  {
    "slug": "stratumv2-jn-announcement",
    "title": " New SRI update with Job Negotiator - allowing miners to select transactions ",
    "description": "A new update of Stratum V2 is available.The new update allows miners to select transactions via a new sub-protocol and their node. We’re inviting miners, pools, firmware makers, and the community to check out our getting started guide and pilot test the software!",
    "date": "2023-04-14",
    "formattedDate": "Apr 14, 2023",
    "authors": ["Pavlenex"],
    "tags": ["StratumV2", "JobNegotiator"],
    "content": "\n_We dig dig dig dig dig dig dig in our mine\nThe whole day through\nTo dig dig dig dig dig dig dig is what we really like to do\nIt ain't no trick to get rich quick\nIf you dig dig dig with a shovel or a pick\nIn a mine! In a mine! In a mine! In a mine!\nWhere a million sats shine!_\n\n_Heigh-ho, Heigh-ho\nHeigh-ho, Heigh-ho_\n\n---\n\nAfter months of coding in our dusty mines, we’re ready to ship a new Stratum V2 reference implementation (SRI) update!\n\nThe new update allows miners to select transactions via a new sub-protocol and their node. This is a major milestone in democratizing transaction selections in pooled mining and decentralizing bitcoin!\n\n**We’re inviting miners, pools, firmware makers, and the community to check out our [getting started guide](https://stratumprotocol.org/getting-started/#config-d-sv1-firmware--translation-proxy-jn-job-negotiator--sv2-pool) and pilot test the software locally, with CPU or actual mining devices. Your feedback will have a high impact on the development direction.**\n\n**Please submit your feedback after testing [via this form](https://docs.google.com/forms/d/1is27h37PtsXtXC9zSbweNfxcyEtHzATjdJphIy8hArw/).**\n\nSRI’s flexible stack offers various components when setting up a configuration that suits your needs. As an early adopter, we recommend testing the mining device with Stratum V1 firmware, connecting to an SV2 pool via Translation Proxy. Miners will run their own template provider (bitcoind) with the max fee policy. Within the translation proxy sits a Job Negotiator that runs a sub-protocol responsible for distributing miner’s templates to the pool.\n\n![Config D](/assets/config-d.svg)\n\nWhile there are various configurations to explore, testing the configuration, which includes Translation Proxy and Job Negotiator will provide valuable feedback to the development team.\n\n## What is a Job Negotiator?\n\nWith the current mining protocol - Stratum V1, the pools use their template providers to dispatch work to the miners. As a result, mining pools are the central point of failure and potential weak spot when it comes to censoring certain transactions by excluding them from the template.\n\nA Job Negotiator, in combination with a template provider, gives the responsibility back to miners or an independent third party to provide a new template (select transactions), thereby making bitcoin pool infrastructure more decentralized.\n\n### How does Job Negotiation work?\n\nBelow is a high-level overview of how a **Job Negotiator (JN)** works.\n\nWe call it the JN dance. 💃 Let’s dance!\n\n1. Downstream (Mining farm, miners) runs a JN. On startup, downstream’s JN connects to a JN run by the Pool\n2. Downstream’s JN sends the AllocateMiningJobToken message to Pool’s JN requesting to get a unique identifier for mining jobs\n3. Pool JN sends back a unique token that helps identify miner's job via the AllocateMiningJobToken.Sucess message. The pool also sends coinbase output used for payouts. Miners must build jobs that have a coinbase with that output.\n4. Downstream’s JN then connects to a Template Provider. Template Provider is usually run locally by the downstream or by an independent third-party\n5. In SV2, miners run their own nodes. The template provider is bitcoind node in our case. Upon established connection, the Template Provider sends New Template and SetNewPrevHash to downstream’s JN. New template contains the merkle path of the transactions that were selected by the bitcoind. SetNewPrevHash is the last valid block header in the blockchain\n6. With SetNewPrevHash, a new template, and the token. a new job can be constructed, so downstream’s JN sends a CommitMiningJob message containing a proposed set of transactions (template data) to Pool’s JN.\n7. The next step is critical in understanding how we implemented JN in the reference implementation. It differs from the specs. In the current iteration, the pool always answers with a CommitMiningJob.Success message accepting the miner's proposal. The pool must accept what’s been suggested by the miner(s). The pool must accept what the miner(s) suggest. Currently, the pool cannot decline what miners are proposing and needs to be made aware of the blocks being mined.\n8. In our next release, we’re adding the ability for miners to fall back to a different pool or solo mine if the pool fails to accept transactions selected by downstream’s Template Provider. We will also add sanity checks so pools can verify the validity of blocks.\n9. Next, the Translation proxy sends a SetCustomMiningJob message to the Pool. The pool sends the job_id that the proxy needs to add to the share and sends it back to the pool to prove that work has been done. Upon verifying the pool replies with SetCustomMiningJobSucess.\n10. Translation Proxy then translates the SV2 message and sends the mining.notify (sv1 message) to mining devices. Mining devices would then start mining and send mining.submit to the Pool through the Translation Proxy, submitting the shares to the pool.\n\nThis is our engineer's way of dancing, a bunch of bullet points. Below is an actual dance with some music. Volume up.\n\n[![How Job Negotiator works](https://img.youtube.com/vi/nOIAhRVCThs/mqdefault.jpg)](https://www.youtube.com/watch?v=nOIAhRVCThs)\n\n## How to get started?\n\nTo get started, follow the instructions on [this page](https://stratumprotocol.org/getting-started/#config-d-sv1-firmware--translation-proxy-jn-job-negotiator--sv2-pool). You can set up everything locally, use a CPU or an ASIC miner, connect to ours, or deploy a pool on your own.\n\nSo far, our community has tested on the following devices/firmware. If you’ve tested the SRI stack on a different device or a firmware version, please [fill this form out](https://docs.google.com/forms/d/1is27h37PtsXtXC9zSbweNfxcyEtHzATjdJphIy8hArw/), and we will update the table.\n\n| Mining Device   | Firmware version        | Tested by                                    |\n| --------------- | ----------------------- | -------------------------------------------- |\n| S9              | Bitmain stock 5/25/2022 | Foundry, Galaxy Mining, 21 Hub Belgrade, Fi3 |\n| S9              | BraiinsOS               | Foundry                                      |\n| S19 Pro - A     | Bitmain stock 5/25/2022 | Galaxy Mining,                               |\n| WhatsMiner M30S | VE10                    | Foundry                                      |\n\n## What’s next?\n\nWith the next update, we will add a fallback functionality that would allow miners to fall back to a different pool or solo mine in case the pool chooses not to accept their suggestion. Miners would, in that case, disconnect and fall back.\n\nIn addition, we will add ways for pools to spot-check the validity of blocks and a few other improvements, like enhancing the encryption and ensuring we're following the latest changes in the spec. Most importantly, we hope to open a pull request for template provider in Bitcoin Core.\n\nWe'd like to thank Stratum V2 supporters, implementers, and all contributors, without whom SRI wouldn't be possible. Please donate to our [crowdfunding page](https://opensats.org/projects/stratumv2) hosted by OpenSats Foundation and Swan to support our development efforts.\n\n![Supporters](/assets/stratum-v2-supporters.png)\n\nIf you’re a company willing to directly support the work of developers by providing a direct grant and being featured on our website, please [get in touch](mailto:stratumv2@gmail.com). We will connect you with our contributors in need of funding.\n\n[Join our Discord](https://discord.gg/UHckbC7x58) to engage with the Stratum V2 community.\n\nWe’re excited to [hear your feedback](https://docs.google.com/forms/d/1is27h37PtsXtXC9zSbweNfxcyEtHzATjdJphIy8hArw/prefill).\n\nHeigh-ho, Heigh-ho!\n",
    "html": "<p><em>We dig dig dig dig dig dig dig in our mine\nThe whole day through\nTo dig dig dig dig dig dig dig is what we really like to do\nIt ain’t no trick to get rich quick\nIf you dig dig dig with a shovel or a pick\nIn a mine! In a mine! In a mine! In a mine!\nWhere a million sats shine!</em></p>\n<p><em>Heigh-ho, Heigh-ho\nHeigh-ho, Heigh-ho</em></p>\n<hr>\n<p>After months of coding in our dusty mines, we’re ready to ship a new Stratum V2 reference implementation (SRI) update!</p>\n<p>The new update allows miners to select transactions via a new sub-protocol and their node. This is a major milestone in democratizing transaction selections in pooled mining and decentralizing bitcoin!</p>\n<p><strong>We’re inviting miners, pools, firmware makers, and the community to check out our <a href=\"https://stratumprotocol.org/getting-started/#config-d-sv1-firmware--translation-proxy-jn-job-negotiator--sv2-pool\">getting started guide</a> and pilot test the software locally, with CPU or actual mining devices. Your feedback will have a high impact on the development direction.</strong></p>\n<p><strong>Please submit your feedback after testing <a href=\"https://docs.google.com/forms/d/1is27h37PtsXtXC9zSbweNfxcyEtHzATjdJphIy8hArw/\">via this form</a>.</strong></p>\n<p>SRI’s flexible stack offers various components when setting up a configuration that suits your needs. As an early adopter, we recommend testing the mining device with Stratum V1 firmware, connecting to an SV2 pool via Translation Proxy. Miners will run their own template provider (bitcoind) with the max fee policy. Within the translation proxy sits a Job Negotiator that runs a sub-protocol responsible for distributing miner’s templates to the pool.</p>\n<p><img src=\"/assets/config-d.svg\" alt=\"Config D\"></p>\n<p>While there are various configurations to explore, testing the configuration, which includes Translation Proxy and Job Negotiator will provide valuable feedback to the development team.</p>\n<h2>What is a Job Negotiator?</h2>\n<p>With the current mining protocol - Stratum V1, the pools use their template providers to dispatch work to the miners. As a result, mining pools are the central point of failure and potential weak spot when it comes to censoring certain transactions by excluding them from the template.</p>\n<p>A Job Negotiator, in combination with a template provider, gives the responsibility back to miners or an independent third party to provide a new template (select transactions), thereby making bitcoin pool infrastructure more decentralized.</p>\n<h3>How does Job Negotiation work?</h3>\n<p>Below is a high-level overview of how a <strong>Job Negotiator (JN)</strong> works.</p>\n<p>We call it the JN dance. 💃 Let’s dance!</p>\n<ol>\n<li>Downstream (Mining farm, miners) runs a JN. On startup, downstream’s JN connects to a JN run by the Pool</li>\n<li>Downstream’s JN sends the AllocateMiningJobToken message to Pool’s JN requesting to get a unique identifier for mining jobs</li>\n<li>Pool JN sends back a unique token that helps identify miner’s job via the AllocateMiningJobToken.Sucess message. The pool also sends coinbase output used for payouts. Miners must build jobs that have a coinbase with that output.</li>\n<li>Downstream’s JN then connects to a Template Provider. Template Provider is usually run locally by the downstream or by an independent third-party</li>\n<li>In SV2, miners run their own nodes. The template provider is bitcoind node in our case. Upon established connection, the Template Provider sends New Template and SetNewPrevHash to downstream’s JN. New template contains the merkle path of the transactions that were selected by the bitcoind. SetNewPrevHash is the last valid block header in the blockchain</li>\n<li>With SetNewPrevHash, a new template, and the token. a new job can be constructed, so downstream’s JN sends a CommitMiningJob message containing a proposed set of transactions (template data) to Pool’s JN.</li>\n<li>The next step is critical in understanding how we implemented JN in the reference implementation. It differs from the specs. In the current iteration, the pool always answers with a CommitMiningJob.Success message accepting the miner’s proposal. The pool must accept what’s been suggested by the miner(s). The pool must accept what the miner(s) suggest. Currently, the pool cannot decline what miners are proposing and needs to be made aware of the blocks being mined.</li>\n<li>In our next release, we’re adding the ability for miners to fall back to a different pool or solo mine if the pool fails to accept transactions selected by downstream’s Template Provider. We will also add sanity checks so pools can verify the validity of blocks.</li>\n<li>Next, the Translation proxy sends a SetCustomMiningJob message to the Pool. The pool sends the job_id that the proxy needs to add to the share and sends it back to the pool to prove that work has been done. Upon verifying the pool replies with SetCustomMiningJobSucess.</li>\n<li>Translation Proxy then translates the SV2 message and sends the mining.notify (sv1 message) to mining devices. Mining devices would then start mining and send mining.submit to the Pool through the Translation Proxy, submitting the shares to the pool.</li>\n</ol>\n<p>This is our engineer’s way of dancing, a bunch of bullet points. Below is an actual dance with some music. Volume up.</p>\n<p><a href=\"https://www.youtube.com/watch?v=nOIAhRVCThs\"><img src=\"https://img.youtube.com/vi/nOIAhRVCThs/mqdefault.jpg\" alt=\"How Job Negotiator works\"></a></p>\n<h2>How to get started?</h2>\n<p>To get started, follow the instructions on <a href=\"https://stratumprotocol.org/getting-started/#config-d-sv1-firmware--translation-proxy-jn-job-negotiator--sv2-pool\">this page</a>. You can set up everything locally, use a CPU or an ASIC miner, connect to ours, or deploy a pool on your own.</p>\n<p>So far, our community has tested on the following devices/firmware. If you’ve tested the SRI stack on a different device or a firmware version, please <a href=\"https://docs.google.com/forms/d/1is27h37PtsXtXC9zSbweNfxcyEtHzATjdJphIy8hArw/\">fill this form out</a>, and we will update the table.</p>\n<table>\n<thead>\n<tr>\n<th>Mining Device</th>\n<th>Firmware version</th>\n<th>Tested by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S9</td>\n<td>Bitmain stock 5/25/2022</td>\n<td>Foundry, Galaxy Mining, 21 Hub Belgrade, Fi3</td>\n</tr>\n<tr>\n<td>S9</td>\n<td>BraiinsOS</td>\n<td>Foundry</td>\n</tr>\n<tr>\n<td>S19 Pro - A</td>\n<td>Bitmain stock 5/25/2022</td>\n<td>Galaxy Mining,</td>\n</tr>\n<tr>\n<td>WhatsMiner M30S</td>\n<td>VE10</td>\n<td>Foundry</td>\n</tr>\n</tbody>\n</table>\n<h2>What’s next?</h2>\n<p>With the next update, we will add a fallback functionality that would allow miners to fall back to a different pool or solo mine in case the pool chooses not to accept their suggestion. Miners would, in that case, disconnect and fall back.</p>\n<p>In addition, we will add ways for pools to spot-check the validity of blocks and a few other improvements, like enhancing the encryption and ensuring we’re following the latest changes in the spec. Most importantly, we hope to open a pull request for template provider in Bitcoin Core.</p>\n<p>We’d like to thank Stratum V2 supporters, implementers, and all contributors, without whom SRI wouldn’t be possible. Please donate to our <a href=\"https://opensats.org/projects/stratumv2\">crowdfunding page</a> hosted by OpenSats Foundation and Swan to support our development efforts.</p>\n<p><img src=\"/assets/stratum-v2-supporters.png\" alt=\"Supporters\"></p>\n<p>If you’re a company willing to directly support the work of developers by providing a direct grant and being featured on our website, please <a href=\"mailto:stratumv2@gmail.com\">get in touch</a>. We will connect you with our contributors in need of funding.</p>\n<p><a href=\"https://discord.gg/UHckbC7x58\">Join our Discord</a> to engage with the Stratum V2 community.</p>\n<p>We’re excited to <a href=\"https://docs.google.com/forms/d/1is27h37PtsXtXC9zSbweNfxcyEtHzATjdJphIy8hArw/prefill\">hear your feedback</a>.</p>\n<p>Heigh-ho, Heigh-ho!</p>\n"
  }
]
