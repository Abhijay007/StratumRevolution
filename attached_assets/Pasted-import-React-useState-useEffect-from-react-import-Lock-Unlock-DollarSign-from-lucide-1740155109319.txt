import React, { useState, useEffect } from 'react';
import { Lock, Unlock, DollarSign } from 'lucide-react';

const Transaction = ({ tx, isSelected, isLocked, onClick, size = 'md' }) => {
  // Calculate color based on fee rate
  const getFeeColor = (feePervB) => {
    if (feePervB >= 25) return 'rgb(34, 197, 94)';  // High fee - green
    if (feePervB >= 15) return 'rgb(234, 179, 8)';  // Medium fee - yellow
    return 'rgb(239, 68, 68)';  // Low fee - red
  };

  const sizeClasses = {
    sm: 'w-16 h-16',
    md: 'w-20 h-20',
    lg: 'w-24 h-24'
  };

  return (
    <button
      onClick={!isLocked ? onClick : undefined}
      className={`
        relative ${sizeClasses[size]} p-2 rounded-sm transition-all duration-300
        ${isLocked ? 'cursor-not-allowed' : 'cursor-pointer hover:-translate-y-1 hover:shadow-lg'}
        ${isSelected ? 'ring-2 ring-cyan-400' : 'ring-1 ring-gray-800'}
      `}
      style={{
        backgroundColor: `${getFeeColor(tx.feePervB)}15`,
        borderColor: getFeeColor(tx.feePervB)
      }}
    >
      <div className="flex flex-col h-full justify-between">
        <div className="flex justify-between items-start">
          <span className="text-[10px] font-mono text-gray-400">TX #{tx.id}</span>
          <span className="text-[10px] font-mono" style={{ color: getFeeColor(tx.feePervB) }}>
            {tx.feePervB} sat/vB
          </span>
        </div>
        <div className="text-center">
          <span className="text-xs font-mono text-gray-400">{tx.size}</span>
        </div>
        <div className="text-right">
          <span className="text-[10px] font-mono text-gray-400">{tx.fee.toFixed(4)} BTC</span>
        </div>
      </div>

      {isLocked && (
        <div className="absolute inset-0 bg-black/50 rounded-sm flex items-center justify-center backdrop-blur-[0.5px]">
          <Lock className="w-4 h-4 text-red-500/70" />
        </div>
      )}

      {isSelected && !isLocked && (
        <div className="absolute -top-1 -right-1 w-3 h-3 bg-cyan-400 rounded-full" />
      )}
    </button>
  );
};

const FeeCounter = ({ totalFees, isDecentralized }) => (
  <div className={`flex items-center justify-between p-3 rounded border ${
    isDecentralized ? 'border-cyan-400/20 bg-cyan-400/5' : 'border-red-500/20 bg-red-500/5'
  }`}>
    <span className="text-sm font-mono text-gray-400">Total Fees</span>
    <div className="flex items-center gap-2">
      <DollarSign className={`w-4 h-4 ${isDecentralized ? 'text-cyan-400' : 'text-red-500'}`} />
      <span className={`text-sm font-mono ${isDecentralized ? 'text-cyan-400' : 'text-red-500'}`}>
        {totalFees.toFixed(4)} BTC
      </span>
    </div>
  </div>
);

const TransactionSelectionComparison = () => {
  const [selectedTxs, setSelectedTxs] = useState([]);
  const [poolSelectedTxs] = useState([1, 3, 5]); // Pool pre-selects some transactions

  const transactions = [
    { id: 1, fee: 0.0025, size: '250 vB', feePervB: 10 },
    { id: 2, fee: 0.0045, size: '300 vB', feePervB: 15 },
    { id: 3, fee: 0.0015, size: '150 vB', feePervB: 10 },
    { id: 4, fee: 0.0060, size: '200 vB', feePervB: 30 },
    { id: 5, fee: 0.0035, size: '175 vB', feePervB: 20 },
    { id: 6, fee: 0.0055, size: '220 vB', feePervB: 25 },
  ].sort((a, b) => b.feePervB - a.feePervB);

  const calculateTotalFees = (txIds) => {
    return transactions
      .filter(tx => txIds.includes(tx.id))
      .reduce((sum, tx) => sum + tx.fee, 0);
  };

  return (
    <div className="w-full h-[32rem] bg-black/30 rounded-lg p-6 border border-gray-800">
      <div className="grid grid-cols-2 h-full gap-8">
        {/* Centralized Selection */}
        <div className="flex flex-col">
          <div className="flex items-center justify-between mb-4">
            <span className="text-sm font-mono text-gray-400">Pool-Controlled Selection</span>
            <div className="flex items-center gap-2 px-3 py-1 rounded-full bg-red-500/10">
              <Lock className="w-4 h-4 text-red-500" />
              <span className="text-xs font-mono text-red-500">Centralized</span>
            </div>
          </div>

          <div className="flex-1 border border-gray-800 rounded-lg p-4 mb-4">
            <div className="grid grid-cols-3 gap-2">
              {transactions.map(tx => (
                <Transaction
                  key={tx.id}
                  tx={tx}
                  isSelected={poolSelectedTxs.includes(tx.id)}
                  isLocked={true}
                  size="sm"
                />
              ))}
            </div>
          </div>

          <FeeCounter totalFees={calculateTotalFees(poolSelectedTxs)} isDecentralized={false} />
        </div>

        {/* Decentralized Selection */}
        <div className="flex flex-col">
          <div className="flex items-center justify-between mb-4">
            <span className="text-sm font-mono text-gray-400">Miner-Controlled Selection</span>
            <div className="flex items-center gap-2 px-3 py-1 rounded-full bg-cyan-400/10">
              <Unlock className="w-4 h-4 text-cyan-400" />
              <span className="text-xs font-mono text-cyan-400">Decentralized</span>
            </div>
          </div>

          <div className="flex-1 border border-gray-800 rounded-lg p-4 mb-4">
            <div className="grid grid-cols-3 gap-2">
              {transactions.map(tx => (
                <Transaction
                  key={tx.id}
                  tx={tx}
                  isSelected={selectedTxs.includes(tx.id)}
                  onClick={() => {
                    setSelectedTxs(prev => 
                      prev.includes(tx.id) 
                        ? prev.filter(id => id !== tx.id)
                        : [...prev, tx.id]
                    );
                  }}
                  size="sm"
                />
              ))}
            </div>
          </div>

          <FeeCounter totalFees={calculateTotalFees(selectedTxs)} isDecentralized={true} />
        </div>
      </div>
    </div>
  );
};

export default TransactionSelectionComparison;